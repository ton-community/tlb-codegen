tmpa$_ a:# b:# = Simple;

a$_ {Arg:Type} arg:Arg = TypedArg Arg;
a$_ x:(TypedArg Simple) = TypedArgUser;

a$_ {Arg:Type} {n:#} arg:Arg c:(## n) = ParamAndTypedArg n Arg;
a$_ x:(ParamAndTypedArg 5 Simple) = ParamAndTypedArgUser; 

_ x:Simple y:Simple = TwoSimples;

_ one_maybe:(Maybe Simple) second_maybe:(Maybe Simple) = TwoMaybes;

bool_false$0 a:# b:(## 7) c:# = TwoConstructors;
bool_true$1 b:# = TwoConstructors; 

tmpb$_ y:(## 5) = FixedIntParam;
tmpc$_ y:FixedIntParam c:# = TypedField;
tmpd#_ y:FixedIntParam c:# = SharpConstructor;

nothing$0 {TheType:Type} = Maybe TheType;
just$1 {TheType:Type} value:TheType = Maybe TheType;
thejust$_ x:(Maybe SharpConstructor) = TypedParam;

left$0 {X:Type} {Y:Type} value:X = Either X Y;
right$1 {X:Type} {Y:Type} value:Y = Either X Y;

a$_ {x:#} value:(## x) = BitLenArg x;
a$_ t:(BitLenArg 4) = BitLenArgUser;

a$_ {x:#} value:(## x) = ExprArg (2 + x);
a$_ t:(ExprArg 6) = ExprArgUser;

a$_ a:ExprArgUser = ComplexTypedField;
a$_ a:^ExprArgUser = CellTypedField;

a$_ t:# ^[ q:# ] ^[ a:(## 32) ^[ e:# ] ^[ b:(## 32) d:# ^[ c:(## 32) ] ] ] = CellsSimple;

b$_ d:int11 g:bits2 {Arg:Type} arg:Arg x:Any = IntBits Arg; 
a$_ {x:#} a:(IntBits (int (1 + x))) = IntBitsInside (x * 2);
a$_ x:(IntBitsInside 6) = IntBitsOutside;

a$_ {e:#} h:(int (e * 8)) f:(uint (7 * e)) i:(bits (5 + e)) j:(int 5) k:(uint e) tc:Cell = IntBitsParametrized e;
a$_ {x:#} a:(IntBitsParametrized x) = IntBitsParametrizedInside x;
a$_ x:(IntBitsParametrizedInside 5) = IntBitsParametrizedOutside;

a$_ x:(#< 4) y:(#<= 4) = LessThan;

a$_ {A:Type} t:# x:A = OneComb A;
a$_ y:(OneComb(OneComb(OneComb int3))) = ManyComb;

unary_zero$0 = Unary ~0;
unary_succ$1 {n:#} x:(Unary ~n) = Unary ~(n + 1);

a$_ n:# = ParamConst 1 1;
b$01 m:# k:# = ParamConst 2 1;
c$01 n:# m:# k:# = ParamConst 3 3;
d$_ n:# m:# k:# l:# = ParamConst 4 2;

a$0 = ParamDifNames 2 ~1;
b$1 = ParamDifNames 3 ~1;
c$1 {n:#} x:(ParamDifNames 2 ~n) = ParamDifNames 2 ~(n + 1);
d$0 {m:#} x:(ParamDifNames 3 ~m) = ParamDifNames 3 ~(m * 2);
e$0 {k:#} x:(ParamDifNames 2 ~k) = ParamDifNamesUser;

b$1 {y:#} t:# z:# { t = (~y) * 2} = NegationFromImplicit ~(y + 1);

hm_edge#_ {l:#} {m:#} label:(Unary ~l) {7 = (~m) + l} = UnaryUserCheckOrder;

a$_ {X:Type} info:int32
  init:(Maybe (Either X ^int22))
  other:(Either X ^(OneComb X))
  body:(Either X ^X) = CombArgCellRef X;
a$_ x:(CombArgCellRef int12) = CombArgCellRefUser;

a$_ {n:#} ref:^(BitLenArg (n + 2)) = MathExprAsCombArg (n + 2);

_ a:# = EmptyTag;

a#f4 x:# = SharpTag;
a$1011 x:# = DollarTag;

a$_ s:(3 * int5) = TupleCheck;

hm_edge#_ {n:#} {X:Type} {l:#} {m:#} label:(HmLabel ~l n) 
          {n = (~m) + l} node:(HashmapNode m X) = Hashmap n X;

hmn_leaf#_ {X:Type} value:X = HashmapNode 0 X;
hmn_fork#_ {n:#} {X:Type} left:^(Hashmap n X) 
           right:^(Hashmap n X) = HashmapNode (n + 1) X;

hml_short$0 {m:#} {n:#} len:(Unary ~n) {n <= m} s:(n * Bit) = HmLabel ~n m;
hml_long$10 {m:#} n:(#<= m) s:(n * Bit) = HmLabel ~n m;
hml_same$11 {m:#} v:Bit n:(#<= m) = HmLabel ~n m;

hme_empty$0 {n:#} {X:Type} = HashmapE n X;
hme_root$1 {n:#} {X:Type} root:^(Hashmap n X) = HashmapE n X;

a$_ x:(HashmapE 8 uint16) = HashmapEUser;

_ a:(## 1) b:a?(## 32) = ConditionalField;

_ a:(## 6) b:(a . 2)?(## 32) = BitSelection;

_ flags:(## 10) { flags <= 100 } = ImplicitCondition;

_ a:# = MultipleEmptyConstructor 0;
_ b:(## 5) = MultipleEmptyConstructor 1;
a$_ x:(## 6) = MultipleEmptyConstructor 2; 

true$_ = True;

a$0 {n:#} = ParamNamedArgInSecondConstr n;
b$1 {n:#} = ParamNamedArgInSecondConstr (n + 1);

a$_ msg:^(Maybe Any) = RefCombinatorAny;

a$_ n:# { 5 + n = 7 } = EqualityExpression;

a$_ x:(## 1) y:x?^Simple = ConditionalRef;

block_info#9bc7a987 seq_no:# { prev_seq_no:# } { ~prev_seq_no + 1 = seq_no } = LoadFromNegationOutsideExpr;

bit$_ (## 1) anon0:# = AnonymousData;

vm_stk_int#0201_ value:int257 = FalseAnonField;

b$1 Simple = ConstructorOrder;
a$0 a:Simple = ConstructorOrder;

a a:#  = CheckCrc32;
b b:# c:# = CheckCrc32;

a$_ const:# = CheckKeyword;

a$_ {X:Type} t:# y:(Maybe ^X) = RefCombinatorInRefHelper X; 
a$_ msg:^(RefCombinatorInRefHelper Any) = RefCombinatorInRef;

bool_false$0 = Bool;
bool_true$1 = Bool;

_ a:Bool = BoolUser;

anycast_info$_ depth:(#<= 30) { depth >= 1 }
   rewrite_pfx:(bits depth) = Anycast;
addr_std$10 anycast:(Maybe Anycast) 
   workchain_id:int8 address:bits256  = MsgAddressInt;
addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9) 
   workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
addr_none$00 = MsgAddressExt;
addr_extern$01 len:(## 9) external_address:(bits len) 
             = MsgAddressExt;
_ _:MsgAddressInt = MsgAddress;
_ _:MsgAddressExt = MsgAddress;

_ src:MsgAddressInt = AddressUser;
_ src:MsgAddressExt = ExtAddressUser;
_ src:MsgAddress = AnyAddressUser;

_ inside:AddressUser = InsideAddressUser;

bit$_ (## 1) = Bit;
a$_ b:Bit = BitUser;

var_uint$_ {n:#} len:(#< n) value:(uint (len * 8))
         = VarUInteger n;
var_int$_ {n:#} len:(#< n) value:(int (len * 8)) 
        = VarInteger n;

a$_ v:(VarUInteger 5) = VarUIntegerUser;
a$_ v:(VarInteger 5) = VarIntegerUser;

nanograms$_ amount:(VarUInteger 16) = Grams;
a$_ g:Grams = GramsUser;

a$_ x:(HashmapE 100 VarUIntegerUser) = HashmapVUIUser;
a$_ x:(HashmapE 100 ^TypedParam) = HashmapTPCell;
a$_ {n:#} x:(HashmapE n uint5) = HashmapVarKey n;
a$_ x:(HashmapVarKey 5) = HashmapVarKeyUser;
a$_ {n:#} x:(HashmapE (n+2) uint5) = HashmapExprKey n;
a$_ x:(HashmapExprKey 5) = HashmapExprKeyUser;
a$_ {A: Type} x:(HashmapE 200 (OneComb A)) = HashmapOneComb A;
a$_ x:(HashmapOneComb uint5) = HashmapOneCombUser;

ahm_edge#_ {n:#} {X:Type} {Y:Type} {l:#} {m:#} 
  label:(HmLabel ~l n) {n = (~m) + l} 
  node:(HashmapAugNode m X Y) = HashmapAug n X Y;
ahmn_leaf#_ {X:Type} {Y:Type} extra:Y value:X = HashmapAugNode 0 X Y;
ahmn_fork#_ {n:#} {X:Type} {Y:Type} left:^(HashmapAug n X Y)
  right:^(HashmapAug n X Y) extra:Y = HashmapAugNode (n + 1) X Y;

ahme_empty$0 {n:#} {X:Type} {Y:Type} extra:Y 
          = HashmapAugE n X Y;
ahme_root$1 {n:#} {X:Type} {Y:Type} root:^(HashmapAug n X Y) 
  extra:Y = HashmapAugE n X Y;

a$_ x:(HashmapAugE 16 Grams FixedIntParam) = HashmapAugEUser;

message$_ {X:Type} body:(Either X ^X) = Message X;
  
_ (Message Any) = MessageAny;

_ x:^FixedIntParam = ShardState;
a$_ {X:Type} a:^X = InsideCell X;
a$_ inside_cell:^(InsideCell ShardState) = InsideCellUser;

vm_stk_null#00 = VmStackValue;
vm_stk_tinyint#01 value:int64 = VmStackValue;
vm_stk_int#0201_ value:int257 = VmStackValue;
vm_stk_nan#02ff = VmStackValue;
vm_stk_cell#03 cell:^Cell = VmStackValue;
_ cell:^Cell st_bits:(## 10) end_bits:(## 10) { st_bits <= end_bits }
  st_ref:(#<= 4) end_ref:(#<= 4) { st_ref <= end_ref } = VmCellSlice;
vm_stk_slice#04 _:VmCellSlice = VmStackValue;
vm_stk_builder#05 cell:^Cell = VmStackValue;
vm_stk_cont#06 cont:VmCont = VmStackValue;
vm_tupref_nil$_ = VmTupleRef 0;
vm_tupref_single$_ entry:^VmStackValue = VmTupleRef 1;
vm_tupref_any$_ {n:#} ref:^(VmTuple (n + 2)) = VmTupleRef (n + 2);
vm_tuple_nil$_ = VmTuple 0;
vm_tuple_tcons$_ {n:#} head:(VmTupleRef n) tail:^VmStackValue = VmTuple (n + 1);
vm_stk_tuple#07 len:(## 16) data:(VmTuple len) = VmStackValue;

vm_stack#_ depth:(## 24) stack:(VmStackList depth) = VmStack;
vm_stk_cons#_ {n:#} rest:^(VmStackList n) tos:VmStackValue = VmStackList (n + 1);
vm_stk_nil#_ = VmStackList 0;

_ cregs:(HashmapE 4 VmStackValue) = VmSaveList;
gas_limits#_ remaining:int64 _:^[ max_limit:int64 cur_limit:int64 credit:int64 ]
  = VmGasLimits;
_ libraries:(HashmapE 256 ^Cell) = VmLibraries;

vm_ctl_data$_ nargs:(Maybe uint13) stack:(Maybe VmStack) save:VmSaveList
cp:(Maybe int16) = VmControlData;
vmc_std$00 cdata:VmControlData code:VmCellSlice = VmCont;
vmc_envelope$01 cdata:VmControlData next:^VmCont = VmCont;
vmc_quit$1000 exit_code:int32 = VmCont;
vmc_quit_exc$1001 = VmCont;
vmc_repeat$10100 count:uint63 body:^VmCont after:^VmCont = VmCont; 
vmc_until$110000 body:^VmCont after:^VmCont = VmCont;
vmc_again$110001 body:^VmCont = VmCont;
vmc_while_cond$110010 cond:^VmCont body:^VmCont
after:^VmCont = VmCont;
vmc_while_body$110011 cond:^VmCont body:^VmCont
after:^VmCont = VmCont;
vmc_pushint$1111 value:int32 next:^VmCont = VmCont;

_ t:VmStack = VMStackUser;

bool_false$0 = BoolFalse;
bool_true$1 = BoolTrue;

bool_false_user$_ x:BoolFalse = BoolFalseUser;
bool_true_user$_ x:BoolTrue = BoolTrueUser;

_ grams:Grams = Coins;
_ coins:Coins = CoinsUser;
tag_calculator_example seq_no : #  seq_no_2 : # { prev_seq_no:  #    } { 2 + ~prev_seq_no +    1 = 2 + seq_no + 2 } { prev_seq_no_2    : # } { ~prev_seq_no_2 = 100 + seq_no_2  *  8   * 7}   =    TagCalculatorExample;